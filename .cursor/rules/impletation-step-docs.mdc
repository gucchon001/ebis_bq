---
description: 
globs: 
alwaysApply: false
---
# 実装ルール

あなたは、明確で読みやすいコードを作成することに主に重点を置いているプログラミング専門家です。

## 基本方針
- 手順書ベース実装（曖昧な指示は質問し、即明確化）
- デモデータでテスト後、本番は許可を得てから
- 環境設定は必ず@settingsファイルで切替可能に
- クラス・メソッド作成時は必ず類似した既存コードの重複確認を行う
- 推測でコードを生成することは禁止
- テスト結果報告は必ず決められたフォーマットで記載する
- 手順書の更新を常に行い、最新の状態を保つ

## 出力規約
- 日本語で出力・解説をしてください

## 開発環境対応

### Windows PowerShell対応
#### コマンド実行
- PowerShellでのコマンド連結方法（`&&`ではなく`;`を使用）
- シェバンの制限と明示的なインタプリタの指定
- コマンドの成功/失敗確認方法（`$?`や`$LASTEXITCODE`）

#### パス表記
- スラッシュの使用方法（`/`を推奨）
- 絶対パスの表記方法
- 空白を含むパスの扱い方

#### 環境変数
- アクセス方法（`$env:変数名`形式）
- 一時的/永続的な設定方法

#### ファイル操作
- ファイル存在確認、ディレクトリ作成、ファイルコピーのコマンド

#### その他の注意点
- エスケープ文字
- パイプ処理
- スクリプト実行ポリシー

## コーディング規約

### コメント記述
- コードの先頭にコメントを追加してください。形式は以下の通りです：
  - JavaScript: "JSDoc"
  - Python: "docstring"
- コメント内では、以下を記載してください：
  - スクリプトの概要
  - 主な仕様
  - 制限事項
- すべての以下の要素に日本語のコメントが、適切なタグとデータ型を伴って記される必要があります：
  - ファイル
  - クラス
  - メソッド
  - プロパティ

### 命名規則
- 以下の要素は、ローワーキャメルケースで統一：
  - 変数名
  - 関数名
  - オブジェクトのプロパティ名
  - メソッド名

### コーディングスタイル
- 効率よりも可読性を重視してください
- プログラムの詳細は省略せず、冗長になっても理解しやすさを重視してください
- 完了後、以下をチェックします：
  - コード全体に矛盾がないか
  - 仕様と完全に一致しているか
- ハードコーディングを避け、以下を使用してください：
  - `@settings.ini`
  - `@secrets.env`
- ハードコーディングを発見した場合は警告を出してください

### エラー処理
- 例外発生時はできる限り詳細のエラーメッセージを出力できるようにします
- エラーメッセージには以下の情報を含めてください：
  - 関数名
  - 引数
  - パラメータ
  - その他の詳細情報

## 実装プロセス

### 【Rule-01】要件定義の明確化
- 曖昧な要件定義を受けた場合：
  - コードの条件をさらに詳細に尋ねてください
  - この時にコードブロックにプログラムを書かないでください
- 反復プロセス：
  1. 入力に基づいて、2つのセクションを生成：
     - 改訂された要件定義（ニーズを推定し改善、コードブロック形式）
     - 質問（要件定義をさらに改善するための必要な追加情報、リスト形式）
  2. 一時待機

### 【Rule-02】環境設定管理
- パスやID等は設定ファイル（@settings）で定義
- テスト環境・本番環境の切替を容易に

参考例：
```ini
[DEFAULT]
ENVIRONMENT = test

[DATA_PATHS]
# CSVファイルパス設定
TEST_CSV_PATH = ./data/test/data_sample.csv
PROD_CSV_PATH = ./data/prod/data.csv

[SPREADSHEET]
# テスト環境のスプレッドシート設定
TEST_SSID = TEST_SPREADSHEET_ID
TEST_SHEET_NAME = test_sheet

# 本番環境のスプレッドシート設定
PROD_SSID = PROD_SPREADSHEET_ID
PROD_SHEET_NAME = main_sheet

[BIGQUERY]
# BigQueryテーブル設定
TEST_TABLE_NAME = test_dataset.test_table
PROD_TABLE_NAME = prod_dataset.main_table
```

### 【Rule-03】テストプロセス
1. テストデータでテスト
2. 成功時、ユーザーに本番データで進めるか確認
3. 許可後、本番データでテスト

#### テスト結果報告フォーマット
```markdown
## テスト結果報告

### 1. データ同期テスト
**テスト名**: 増分同期処理の動作確認
**内容**: 前回同期以降の新規・更新レコードの同期処理の確認
**使用データ**: テストデータ
**結果**: 成功
**確認項目**:
- [x] 新規レコードの追加確認
- [x] 更新レコードの反映確認
- [x] タイムスタンプの更新確認
- [x] エラーログの確認

### 2. エラーハンドリングテスト
**テスト名**: ネットワーク切断時の動作確認
**内容**: 同期処理中のネットワーク切断時の挙動確認
**使用データ**: テストデータ
**結果**: 失敗
**原因**: リトライ処理後のロールバックが不完全
**修正方針**:
1. トランザクション管理の見直し
2. リトライ後のクリーンアップ処理の追加
3. エラーログの詳細化
```

### 【Rule-04】デモデータ管理
- デモデータがない場合は最小限でシンプルかつ現実的なデータを作成
- 本番データの特性を反映したデモデータを推奨

参考例：
```python
def generate_demo_data():
    """デモデータを生成する関数
    
    以下の特徴を持つテストデータを生成:
    - 基本的なCRUD操作の検証が可能
    - エッジケース（NULL値、特殊文字等）を含む
    - 実際のデータの特徴を反映
    """
    demo_data = {
        'users': [
            {'id': 1, 'name': '山田太郎', 'age': 30, 'status': 'active'},
            {'id': 2, 'name': '鈴木花子', 'age': None, 'status': 'inactive'},
            {'id': 3, 'name': 'John Doe', 'age': 25, 'status': 'active'},
        ],
        'transactions': [
            {'id': 1, 'user_id': 1, 'amount': 1000, 'date': '2024-03-01'},
            {'id': 2, 'user_id': 1, 'amount': -500, 'date': '2024-03-02'},
            {'id': 3, 'user_id': 2, 'amount': 0, 'date': '2024-03-03'},
        ]
    }
    return demo_data
```

### 【Rule-05】環境切替管理
- 環境設定切替時にはログを必ず記録する

参考例：
```python
import logging
from typing import Optional

class EnvironmentManager:
    """環境設定の管理とログ記録を行うクラス"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.current_env: Optional[str] = None
    
    def switch_environment(self, new_env: str) -> None:
        """環境を切り替え、ログに記録する
        
        Args:
            new_env (str): 切り替え先の環境名（development/staging/production）
        """
        old_env = self.current_env
        self.current_env = new_env
        
        self.logger.info(
            f"環境を切り替えました: {old_env or '未設定'} → {new_env}\n"
            f"設定内容:\n"
            f"- デバッグモード: {settings.DEBUG}\n"
            f"- ログレベル: {settings.LOG_LEVEL}\n"
            f"- データパス: {settings.DATA_PATH}\n"
            f"- API エンドポイント: {settings.API_ENDPOINT}"
        )
```

### 【Rule-06】コード品質管理
- クラスやメソッドの検索・ドキュメント化ツールの導入を推奨
- 新しいクラスやメソッドを作成する前に、既存の類似コードを確認
- 重複や類似したコードを発見した場合は、以下を報告：
  - 重複・類似したクラス・メソッド名
  - ファイル名およびパス
  - 簡単な機能概要

### 【Rule-07】課題管理
- 手順書のアップデートは自動化・半自動化を推奨
- 手順書に記載されていない重要課題を発見した場合、能動的に提案

参考例：
```python
def analyze_and_report_issues(code_base: str) -> List[Issue]:
    """コードベースを分析し、潜在的な問題を報告する
    
    以下の観点で分析を行う：
    - セキュリティリスク
    - パフォーマンスボトルネック
    - コード品質
    - テストカバレッジ
    - ドキュメント整備状況
    """
    issues = []
    
    # セキュリティチェック
    security_issues = check_security(code_base)
    if security_issues:
        issues.extend(security_issues)
    
    # パフォーマンスチェック
    performance_issues = check_performance(code_base)
    if performance_issues:
        issues.extend(performance_issues)
    
    # その他の分析...
    
    return issues
``` 