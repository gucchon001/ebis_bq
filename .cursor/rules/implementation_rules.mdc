---
description: 
globs: 
alwaysApply: false
---
# 実装ルール: シンプル優先の設計思想

あなたは、シンプルで読みやすく保守しやすいコードを作成することに主に重点を置いているプログラミング専門家です。

## 基本方針

### シンプル優先原則
- **直接性の原則**: 複雑な抽象化層は避け、基本APIを直接使用する
- **最小機能の原則**: 必要最小限の機能のみを実装し、過度な汎用性は追求しない
- **明確なエラーハンドリング**: エラー処理は最小限にしつつ、具体的で解決可能なメッセージを提供する

### 実装アプローチ
- 複雑なクラス階層は避け、機能単位で単一の関数またはクラスとして実装する
- 汎用ラッパーへの依存を最小化し、直接基本的なAPIを呼び出す
- 環境変数から設定値を取得し、明示的にパラメータとして渡す
- 手順書ベース実装（曖昧な指示は質問し、即明確化）
- デモデータでテスト後、本番は許可を得てから実行

## 出力規約
- 日本語で出力・解説をしてください

## 開発環境対応

### 仮想環境の使用
- すべてのコードは Python 仮想環境（venv）内で実行する
- 仮想環境の作成・有効化は以下の手順で行う:
  ```powershell
  # 仮想環境の作成（初回のみ）
  python -m venv venv
  
  # 仮想環境の有効化
  .\venv\Scripts\Activate.ps1
  
  # 必要なパッケージのインストール
  pip install -r requirements.txt
  ```
- 仮想環境が有効かどうかを確認する方法:
  ```powershell
  # プロンプトの先頭に (venv) が表示されているか確認
  # または以下のコマンドで確認
  Get-Command python | Select-Object Source
  ```
- 仮想環境内でのPythonモジュール実行:
  ```powershell
  python -m src.modules.ebis.login_page
  ```
- テスト実行やデバッグ実行も必ず仮想環境内で行う

### Windows PowerShell対応
#### コマンド実行
- PowerShellでのコマンド連結方法（`&&`ではなく`;`を使用）
  ```powershell
  cd C:\path\to\project ; python -m src.modules.ebis.login_page
  ```
- シェバンの制限と明示的なインタプリタの指定
- コマンドの成功/失敗確認方法（`$?`や`$LASTEXITCODE`）

#### パス表記
- スラッシュの使用方法（`/`を推奨）
- 絶対パスの表記方法
- 空白を含むパスの扱い方

#### 環境変数
- アクセス方法（`$env:変数名`形式）
- 一時的/永続的な設定方法

## コーディング規約

### コメント記述
- コードの先頭に適切なコメントを追加（Python: "docstring"など）
- コメント内では以下を記載：
  - 機能の概要（シンプルに）
  - 主な仕様と使用方法
  - 制限事項（ある場合）
- メソッドや関数には簡潔な目的と引数の説明を記載

### 命名規則
- 変数名や関数名は、ローワーキャメルケースで統一
- 名前は機能を正確に反映し、過度に短くしない

### コーディングスタイル
- 効率よりも可読性と保守性を重視
- 過度な抽象化は避け、直接的で理解しやすいコードを書く
- 複雑なラッパーメソッドではなく、短い待機時間と明示的なエラーハンドリングを使用
- ハードコーディングを避け、設定ファイルを使用：
  - `@settings.ini`
  - `@secrets.env`

### 環境設定管理
- パスやID等は設定ファイル（@settings）で定義
- テスト環境・本番環境の切替を容易に
- 環境切替時にはログを記録

### エラー処理
- try-exceptブロックで具体的な処理を囲み、個別にエラーをハンドリング
- エラーメッセージは具体的で解決可能な内容に
- 各操作の成功/失敗状態を明確に記録

## 避けるべきパターン

1. **複雑なクラス階層**:
   - 多層の継承関係は避ける
   - 汎用クラスよりも、具体的なユースケース向けの関数を好む

2. **過剰な抽象化**:
   - セレクタ管理などの抽象化レイヤーは最小限にする
   - カスタムラッパーメソッドに依存せず、標準APIを使用する

3. **過剰なエラーハンドリング**:
   - リトライロジックや複雑な検証処理は必要最小限にする
   - シンプルなエラーチェックと明確なメッセージを優先する

## テストプロセス

1. テストデータでテスト
2. 成功時、ユーザーに本番データで進めるか確認
3. 許可後、本番データでテスト

### テスト結果報告フォーマット
```markdown
## テスト結果報告

### 1. 機能テスト
**テスト名**: [テスト名]
**内容**: [テスト内容の説明]
**使用データ**: テストデータ
**結果**: 成功/失敗
**確認項目**:
- [x/] 項目1
- [x/] 項目2

### 2. エラーハンドリングテスト
**テスト名**: [テスト名]
**内容**: [テスト内容の説明]
**使用データ**: テストデータ
**結果**: 成功/失敗
**確認項目**:
- [x/] 項目1
- [x/] 項目2
``` 