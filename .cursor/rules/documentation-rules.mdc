---
description: 
globs: 
alwaysApply: false
---
# 仕様書・文書作成ルール: シンプル優先の設計思想に基づく

## 1. 仕様書の基本原則

### 1.1. シンプル優先の原則
- **明瞭性**: 複雑な用語や回りくどい表現を避け、直接的で理解しやすい記述を心がける
- **具体性**: 抽象的な概念よりも、具体的な例やステップを優先する
- **必要最小限**: 余分な情報は排除し、必要な情報のみを記載する

### 1.2. 設計思想の明示
仕様書の冒頭に、その機能やモジュールの設計思想を明確に記述する：
- シンプル優先の原則
- 直接的な実装方法
- クラス階層よりも関数ベース
- 過度な抽象化を避ける方針

## 2. 仕様書のフォーマットと構成

### 2.1. 必須セクション
- **概要**: 機能の目的と主な特徴を簡潔に説明
- **設計原則**: 実装において守るべき原則を明記
- **機能詳細**: 個々の機能について具体的に説明
- **前提条件**: 実装や動作に必要な環境や設定
- **インターフェース**: 関数名、引数、戻り値など（コードスニペットなし）
- **エラー処理**: 発生しうるエラーとその対応方法
- **要素識別情報**: UI要素などの具体的な識別子（ID、セレクタなど）

### 2.2. オプションセクション
- **実行例**: コマンドラインや関数呼び出しの例（コンセプトのみ）
- **用語定義**: 専門用語や略語の説明
- **参考情報**: 設定ファイル例や外部リソースへの参照

### 2.3. 避けるべき要素
- 実装コードスニペット（説明のためのコンセプト表現は可）
- 具体的な実装に関する過度に詳細な指示
- 特定の実装方法に依存する記述

## 3. 文書作成の具体的ガイドライン

### 3.1. 表現方法
- 命令形の使用: 「〜すること」「〜する」など、明確な指示表現
- 箇条書きの活用: 長い段落よりも、簡潔な箇条書きを優先
- 表や図の使用: 複雑な関係や構造は表や図で表現
- 具体例の提示: 抽象的な説明より具体例を多用

### 3.2. 要素識別情報の記載方法
- 表形式での整理: 要素名、識別子、説明を表形式で整理
- 複数の識別方法: 主要識別子と代替識別子を併記
- 具体的な値: XPath、ID、クラス名など具体的な値を記載

### 3.3. エラー処理の記載
- 具体的なエラー状況: 発生する可能性のあるエラーを具体的に列挙
- 解決可能な情報: エラーメッセージが単なる通知ではなく解決策を含むよう指示
- エラー記録方法: ログ記録やスクリーンショット保存などの具体的な方法を記載

## 4. レビューと評価基準

仕様書や文書のレビュー時には、以下の基準で評価する：

1. **直接性**: 複雑な抽象化や回りくどい表現なく直接的に書かれているか
2. **具体性**: 抽象的な表現ではなく具体的な指示や例が含まれているか
3. **完全性**: 必要な情報が過不足なく含まれているか
4. **一貫性**: 設計思想と矛盾する記述がないか
5. **明確性**: 曖昧さがなく一意に解釈できるか

## 5. 維持と更新

仕様書や文書は「生きた文書」として扱い、以下のルールで維持・更新する：

1. 実装との乖離が発生した場合は速やかに更新
2. 設計思想を変更する場合は、まず仕様書から更新
3. 仕様書の変更履歴を記録し、重要な変更点を明記 